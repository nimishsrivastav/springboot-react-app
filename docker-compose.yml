services:
  postgres:
    image: postgres:14.18-bookworm
    container_name: blogapp-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-blogdb}
      POSTGRES_USER: ${DB_USERNAME:-bloguser}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - blogapp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bloguser -d blogdb"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: blogapp-backend
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-blogdb}
      DB_USERNAME: ${DB_USERNAME:-bloguser}
      DB_PASSWORD: ${DB_PASSWORD}
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - blogapp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pgrep", "-f", "java.*app.jar"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: blogapp-frontend
    environment:
      REACT_APP_API_URL: http://localhost:8080/api/v1
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - blogapp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
    driver: local

networks:
  blogapp-network:
    driver: bridge